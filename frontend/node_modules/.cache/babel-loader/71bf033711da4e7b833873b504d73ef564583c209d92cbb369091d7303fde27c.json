{"ast":null,"code":"var _jsxFileName = \"/Users/0x/Documents/GitHub/hello3/frontend/src/components/ChatApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport './ChatApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApp() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Load chat history on initial load\n  useEffect(() => {\n    fetchChatHistory();\n  }, []);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const fetchChatHistory = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/chat/history');\n      const history = await response.json();\n      setMessages(history);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim()) return;\n    const userMessage = inputValue;\n    setInputValue('');\n\n    // Add user message to chat\n    setMessages(prev => [...prev, {\n      role: 'user',\n      content: userMessage,\n      timestamp: Date.now()\n    }]);\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: userMessage\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessages(prev => [...prev, {\n          role: 'assistant',\n          content: data.response,\n          timestamp: Date.now(),\n          memories: data.memories_used\n        }]);\n      } else {\n        throw new Error(data.error || 'Failed to get response');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prev => [...prev, {\n        role: 'assistant',\n        content: 'Sorry, there was an error processing your message.',\n        timestamp: Date.now(),\n        isError: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memory-Enhanced Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-button\",\n        onClick: () => setMessages([]),\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage(),\n        placeholder: \"Type a message...\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: isLoading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatApp, \"lMJTFE8UF/A9JNOJrXITxRiGPAM=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageBubble","jsxDEV","_jsxDEV","ChatApp","_s","messages","setMessages","inputValue","setInputValue","isLoading","setIsLoading","messagesEndRef","fetchChatHistory","_messagesEndRef$curre","current","scrollIntoView","behavior","response","fetch","history","json","error","console","handleSendMessage","trim","userMessage","prev","role","content","timestamp","Date","now","method","headers","body","JSON","stringify","message","data","ok","memories","memories_used","Error","isError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","type","value","onChange","e","target","onKeyPress","key","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/0x/Documents/GitHub/hello3/frontend/src/components/ChatApp.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport './ChatApp.css';\n\nfunction ChatApp() {\n    const [messages, setMessages] = useState([]);\n    const [inputValue, setInputValue] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const messagesEndRef = useRef(null);\n    \n    // Load chat history on initial load\n    useEffect(() => {\n        fetchChatHistory();\n    }, []);\n    \n    // Auto-scroll to bottom when messages change\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n    \n    const fetchChatHistory = async () => {\n        try {\n            const response = await fetch('http://localhost:5001/api/chat/history');\n            const history = await response.json();\n            setMessages(history);\n        } catch (error) {\n            console.error('Error fetching chat history:', error);\n        }\n    };\n    \n    const handleSendMessage = async () => {\n        if (!inputValue.trim()) return;\n        \n        const userMessage = inputValue;\n        setInputValue('');\n        \n        // Add user message to chat\n        setMessages(prev => [...prev, {\n            role: 'user',\n            content: userMessage,\n            timestamp: Date.now()\n        }]);\n        \n        setIsLoading(true);\n        \n        try {\n            const response = await fetch('http://localhost:5001/api/chat', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message: userMessage }),\n            });\n            \n            const data = await response.json();\n            \n            if (response.ok) {\n                setMessages(prev => [...prev, {\n                    role: 'assistant',\n                    content: data.response,\n                    timestamp: Date.now(),\n                    memories: data.memories_used\n                }]);\n            } else {\n                throw new Error(data.error || 'Failed to get response');\n            }\n        } catch (error) {\n            console.error('Error sending message:', error);\n            setMessages(prev => [...prev, {\n                role: 'assistant',\n                content: 'Sorry, there was an error processing your message.',\n                timestamp: Date.now(),\n                isError: true\n            }]);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    \n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-header\">\n                <h1>Memory-Enhanced Assistant</h1>\n                <button \n                    className=\"clear-button\"\n                    onClick={() => setMessages([])}\n                >\n                    Clear Chat\n                </button>\n            </div>\n            \n            <div className=\"messages-container\">\n                {messages.map((message, index) => (\n                    <MessageBubble \n                        key={index}\n                        message={message}\n                    />\n                ))}\n                {isLoading && (\n                    <div className=\"message assistant\">\n                        <div className=\"typing-indicator\">\n                            <span></span>\n                            <span></span>\n                            <span></span>\n                        </div>\n                    </div>\n                )}\n                <div ref={messagesEndRef} />\n            </div>\n            \n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                    placeholder=\"Type a message...\"\n                    disabled={isLoading}\n                />\n                <button \n                    onClick={handleSendMessage}\n                    disabled={isLoading}\n                >\n                    Send\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ChatApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}